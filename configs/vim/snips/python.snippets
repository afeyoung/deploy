# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet import "Normal Import" b
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(color_codes=True)
plt.rcParams['font.sans-serif'] = 'SimHei'
plt.rcParams['axes.unicode_minus'] = False
from tqdm.cli import tqdm
# tqdm.pandas()  # for progress_apply
from IPython import get_ipython
IPY = get_ipython()
IPY.run_line_magic("matplotlib", "inline")
IPY.run_line_magic("load_ext", "autoreload")
IPY.run_line_magic("load_ext", "autotime")
endsnippet


snippet path "import path" b
import sys
sys.path.append('/home/xiaoyang/repos/${1:data_selection}')
endsnippet

snippet ol "Outlines" b
# %% [markdown]
# # Outlines: ${1:header}
endsnippet

snippet ol2 "Outlines" b
# %% [markdown]
# ## Outlines: ${1:header}
endsnippet

snippet IPY "run magic" b
IPY.run_line_magic("${1:magic command}")
endsnippet

snippet groupbyic "calc pred label df ic" b
groupby("datetime").apply(lambda df: df['${1:score}'].corr(df['${2:label}'], method='${3:spearman}'))
endsnippet

snippet raisenip "Not Implemented" b
raise NotImplementedError(f"This type of input is not supported")
endsnippet

snippet TODOPI "Implemented TODO" b
# TODO: Please implement me!!!!
return
endsnippet

snippet dirname "get current dirname" b
from pathlib import Path
DIRNAME = Path(__file__).absolute().resolve().parent
endsnippet

snippet embed "Embed for debuging" b
from IPython import embed; embed()
endsnippet

snippet fontsize "Change font size" b
def change_fs(font_size):
	font_size = font_size
	plt.rc('font', size=font_size)         # controls default text sizes
	plt.rc('axes', titlesize=font_size)    # fontsize of the axes title
	plt.rc('axes', labelsize=font_size)    # fontsize of the x and y labels
	plt.rc('xtick', labelsize=font_size)   # fontsize of the tick labels
	plt.rc('ytick', labelsize=font_size)   # fontsize of the tick labels
	plt.rc('legend', fontsize=font_size)   # legend fontsize
	plt.rc('figure', titlesize=font_size)  # fontsize of the figure title
endsnippet

snippet ntf "Notify me" b
from wan import ntf; ntf('${1:Done}')
endsnippet
